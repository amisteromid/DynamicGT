import pymol
from pymol import cmd, stored

def create_custom_spectrum(selection="b", name="custom_spectrum", minimum=0, maximum=1):
    # Define the colors
    blue = [0.3, 0.3, 0.9]
    middle = [0.78, 0.78, 0.88]
    red = [1, 1, 1]
    
    # Create color ranges
    colors = []
    steps = 50  # Number of interpolation steps for smooth transition
    
    # Interpolate blue to middle
    for i in range(steps):
        t = i / (steps - 1)
        color = [blue[j] + (middle[j] - blue[j]) * t for j in range(3)]
        colors.append(color)
    
    # Interpolate middle to red
    for i in range(steps):
        t = i / (steps - 1)
        color = [middle[j] + (red[j] - middle[j]) * t for j in range(3)]
        colors.append(color)

    color_names = []
    for i, color in enumerate(colors):
        color_name = f"{name}_{i}"
        cmd.set_color(color_name, color)
        color_names.append(color_name)

    cmd.spectrum("b", " ".join(color_names), selection, minimum=minimum, maximum=maximum)
   
pdb_chain_id = '2DZE_A'
values=[0.6545454545454545, 0.6909090909090909, 0.6, 0.25311360380418246, 0.6, 0.6909090909090909, 0.5818181818181818, 0.6363636363636364, 0.5454545454545454, 0.5818181818181818, 0.4727272727272727, 0.41818181818181815, 0.41818181818181815, 0.509090909090909, 0.4909090909090909, 0.41818181818181815, 0.43636363636363634, 0.2545454545454545, 0.23636363636363636, 0.2545454545454545, 0.3090909090909091, 0.32727272727272727, 0.10909090909090909, 0.021858681655514564, 0.5454545454545454, 0.5272727272727272, 0.509090909090909, 0.41818181818181815, 0.43636363636363634, 0.38181818181818183, 0.45454545454545453, 0.34545454545454546, 0.41818181818181815, 0.43636363636363634, 0.2727272727272727, 0.21818181818181817, 0.0, 0.05454545454545454, 0.12727272727272726, 0.0, 0.16363636363636364, 0.36363636363636365, 0.34545454545454546, 0.32727272727272727, 0.5818181818181818, 0.8545454545454545, 0.8181818181818182, 0.7636363636363637, 0.6363636363636364, 0.6181818181818182, 0.4909090909090909, 0.38181818181818183, 0.32727272727272727, 0.2909090909090909, 0.21818181818181817, 0.16363636363636364, 0.07272727272727272, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18181818181818182, 0.07272727272727272, 0.2, 0.2727272727272727, 0.32727272727272727, 0.23636363636363636, 0.2545454545454545, 0.2, 0.23636363636363636, 0.2, 0.09090909090909091, 0.0, 0.12727272727272726, 0.0, 0.03636363636363636, 0.09090909090909091, 0.21818181818181817, 0.2545454545454545, 0.4909090909090909, 0.38181818181818183, 0.41818181818181815, 0.43636363636363634, 0.5272727272727272, 0.5272727272727272, 0.8363636363636363, 0.8, 0.8545454545454545, 0.8545454545454545, 0.9454545454545454, 0.8727272727272727, 0.7272727272727273, 0.6909090909090909, 0.5818181818181818, 0.38181818181818183, 0.34545454545454546, 0.34545454545454546, 0.133866064980671, 0.3090909090909091, 0.36363636363636365, 0.09090909090909091, 0.2909090909090909, 0.43636363636363634, 0.38181818181818183, 0.4727272727272727, 0.45454545454545453, 0.6909090909090909, 0.6909090909090909, 0.6363636363636364, 0.6909090909090909, 0.8909090909090909, 0.8727272727272727, 0.7090909090909091, 0.7272727272727273, 0.7090909090909091, 0.7090909090909091, 0.6909090909090909, 0.7454545454545455, 0.7818181818181819, 0.7454545454545455, 0.8545454545454545, 0.8727272727272727, 0.9636363636363636, 1.0, 0.9818181818181818, 0.9454545454545454, 0.8909090909090909, 0.8727272727272727, 0.8013294806978221, 0.7451941713587404, 0.7272727272727273, 0.7090909090909091, 0.6, 0.6181818181818182, 0.509090909090909, 0.34545454545454546, 0.36363636363636365, 0.6363636363636364, 0.3844138519444922, 0.32798661883834157, 0.6909090909090909, 0.6909090909090909, 0.6363636363636364, 0.6181818181818182, 0.9090909090909091, 0.8909090909090909, 0.8, 0.9454545454545454, 0.6727272727272727, 0.6727272727272727, 0.6909090909090909, 0.7272727272727273, 0.6, 0.5454545454545454, 0.45454545454545453, 0.6363636363636364, 0.6363636363636364, 0.509090909090909, 0.5454545454545454]

pdb_id, chain_id = pdb_chain_id.split('_')
cmd.fetch(pdb_id, async_=0)
cmd.remove('not polymer.protein')
stored.values = values
stored.counter = 0

chain_sele = f"{pdb_id} and chain {chain_id}"
ca_sele = f"{chain_sele} and name CA"

n_res = cmd.count_atoms(ca_sele)
if n_res != len(values):
    raise ValueError(f"Number of residues ({n_res}) doesn't match number of values ({len(values)})")

cmd.alter(chain_sele, "b=-1")

# Assign custom values only to CA atoms
cmd.alter(ca_sele, "b=stored.values[stored.counter]; stored.counter += 1")

# Copy CA atom B-factors to other atoms in the same residue
cmd.iterate(f"{chain_sele} and name CA", "cmd.alter(f'{pdb_id} and chain {chain_id} and resi {resi}', f'b={b}')")

create_custom_spectrum(selection=chain_sele)
cmd.extract('target', f"{chain_sele}")
cmd.show('mesh', 'target')
cmd.hide('cartoon', 'target')
cmd.copy('target2', 'target')
cmd.hide('mesh', 'target2')
cmd.show('sphere','target2 and resi 54 and name CA')
cmd.show('sphere','target2 and resi 127 and name CA')
cmd.color('gray80','target2 and resi 127 and name CA')

cmd.set("ambient", 1.0)
cmd.set("direct", 1.0)
